
 1. What are the key features of Python that make it a popular choice for programming?

Python is a high-level, general-purpose programming language known for its simplicity and versatility. Its popularity stems from the following features:

Simple Syntax: Python's syntax is close to English, making it easy to read and write code.
Interpreted Language: Python runs line-by-line, which makes it easier to debug and test.
Dynamic Typing: You do not need to declare data types explicitly.
Cross-platform Compatibility: Python programs can run on Windows, Linux, and macOS without modification.
Extensive Standard Library: Python includes built-in modules for file handling, math, system operations, etc.
Support for Multiple Programming Paradigms**: Python supports procedural, object-oriented, and functional programming styles.
Large Community and Ecosystem: A vast collection of third-party libraries and frameworks like NumPy, Django, and Flask.

python
name = "Alice"
print("Hello", name)

### 2. What is the role of predefined keywords in Python? Provide examples.

Predefined keywords are reserved words in Python that serve specific functions in the language’s syntax and structure. They cannot be used as variable names. These keywords control the flow of execution, define functions, create loops, handle exceptions, and more.

Examples of keywords:`if`, `else`, `while`, `for`, `def`, `class`, `return`, `import`, `True`, `False`, `None`

Example 

if 10 > 5:
    print("Ten is greater than five")

 3. Compare and contrast mutable and immutable objects in Python with examples.


In Python, data types are classified as either mutable or immutable based on whether their values can be changed after creation.

Mutable Objects: Can be changed after creation.
Immutable Objects: Cannot be changed after creation. Any operation that modifies the object actually creates a new one.

Mutable Types: `list`, `dict`, `set`
Immutable Types:`int`, `float`, `str`, `tuple`

Example

Mutable:

numbers = [1, 2, 3]
numbers.append(4)  # The list is changed
print(numbers)     # Output: [1, 2, 3, 4]

Immutable:

python
text = "hello"
text = text + " world"  # A new string object is created
print(text)             # Output: "hello world"

### 4. Explain the concept of type casting in Python with examples.

Answer:

Type casting in Python refers to converting a value from one data type to another. It can be done using built-in functions like `int()`, `float()`, `str()`, etc.

Types of type casting:

Implicit Casting: Done automatically by Python.
Explicit Casting: Manually converting the type.

Examples:

Explicit:
x = "100"
y = int(x)      # Converts string to integer
print(y + 20)   # Output: 120

Implicit:

a = 5
b = 2.0
result = a + b  # Integer 5 is implicitly converted to float
print(result)   # Output: 7.0


### 5. Discuss the different types of operators in Python and provide examples.

Answer

Python provides various types of operators for performing operations on variables and values.

Types of Operators:

1. Arithmetic Operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`
2. Comparison Operators: `==`, `!=`, `>`, `<`, `>=`, `<=`
3. Logical Operators: `and`, `or`, `not`
4. Assignment Operators: `=`, `+=`, `-=`, `*=`, `/=`
5. Bitwise Operators: `&`, `|`, `^`, `~`, `<<`, `>>`
6. Membership Operators: `in`, `not in`
7. Identity Operators: `is`, `is not`


# Arithmetic
x = 10
y = 3
print(x % y)  # Output: 1

# Logical
print(x > 5 and y < 5)  # Output: True

# Membership
print('a' in 'apple')   # Output: True


### 6. How do conditional statements work in Python? Illustrate with examples.

Conditional statements are used to perform different actions based on different conditions. Python supports `if`, `elif`, and `else` statements.


if condition:
    # code block
elif another_condition:
    # another block
else:
    # default block

**Example
marks = 75
if marks >= 90:
    print("Grade A")
elif marks >= 60:
    print("Grade B")
else:
    print("Grade C")


This checks conditions in order and executes the first true condition’s block.

---
### 7. Describe the different types of loops in Python and their use cases with examples.

Python provides two main types of loops: `for` and `while`.

1. For Loop: Used to iterate over a sequence like list, string, or range.
2. While Loop: Repeats a block of code as long as the condition is true.

For Loop Example:

fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)

While Loop Example:

count = 1
while count <= 5:
    print(count)
    count += 1


* Use `for` when the number of iterations is known.
* Use `while` when the loop depends on a condition, not the number of iterations.


